{\rtf1\ansi\ansicpg1252\cocoartf2580
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\froman\fcharset0 Times-Bold;\f2\fswiss\fcharset0 Helvetica;
\f3\fmodern\fcharset0 Courier;\f4\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red0\green0\blue0;\red251\green2\blue7;
\red246\green246\blue239;\red29\green30\blue26;\red244\green0\blue95;\red224\green213\blue97;\red88\green209\blue235;
\red98\green94\blue76;\red157\green101\blue255;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c0\c0\c0;\cssrgb\c100000\c14913\c0;
\cssrgb\c97255\c97255\c94902;\cssrgb\c15294\c15686\c13333;\cssrgb\c97647\c14902\c44706;\cssrgb\c90196\c85882\c45490;\cssrgb\c40000\c85098\c93725;
\cssrgb\c45882\c44314\c36863;\cssrgb\c68235\c50588\c100000;}
\margl1440\margr1440\vieww21940\viewh7480\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf2 \
\pard\pardeftab720\partightenfactor0

\f1\fs36 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Installation\cf3 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b0\fs32 \cf4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 ==========\cf0 \
\pard\pardeftab720\partightenfactor0
\cf3 1. Selenium:\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 pip install selenium\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf3 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf2 \
CODE:\
\pard\pardeftab720\partightenfactor0

\f3\b0\fs24 \cf7 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 from\cf5 \strokec5  selenium \cf7 \strokec7 import\cf5 \strokec5  webdriver\
\
DRIVER_PATH \cf7 \strokec7 =\cf5 \strokec5  \cf8 \strokec8 '/path/to/chromedriver'\cf5 \strokec5 \
driver \cf7 \strokec7 =\cf5 \strokec5  webdriver\cf7 \strokec7 .\cf5 \strokec5 Chrome(executable_path\cf7 \strokec7 =\cf5 \strokec5 DRIVER_PATH)\
driver\cf7 \strokec7 .\cf5 \strokec5 get(\cf8 \strokec8 'https://google.com'\cf5 \strokec5 )\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0  \
HEADLESS BROWSER:\
\pard\pardeftab720\partightenfactor0

\f3\b0\fs24 \cf7 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 from\cf5 \strokec5  selenium \cf7 \strokec7 import\cf5 \strokec5  webdriver\
\cf7 \strokec7 from\cf5 \strokec5  selenium.webdriver.chrome.options \cf7 \strokec7 import\cf5 \strokec5  Options\
\
options \cf7 \strokec7 =\cf5 \strokec5  Options()\
options\cf7 \strokec7 .\cf5 \strokec5 headless \cf7 \strokec7 =\cf5 \strokec5  True\
options\cf7 \strokec7 .\cf5 \strokec5 add_argument(\cf8 \strokec8 "--window-size=1920,1200"\cf5 \strokec5 )\
\
driver \cf7 \strokec7 =\cf5 \strokec5  webdriver\cf7 \strokec7 .\cf5 \strokec5 Chrome(options\cf7 \strokec7 =\cf5 \strokec5 options, executable_path\cf7 \strokec7 =\cf5 \strokec5 DRIVER_PATH)\
driver\cf7 \strokec7 .\cf5 \strokec5 get(\cf8 \strokec8 "https://www.nintendo.com/"\cf5 \strokec5 )\
\pard\pardeftab720\partightenfactor0
\cf9 \strokec9 print\cf5 \strokec5 (driver\cf7 \strokec7 .\cf5 \strokec5 page_source)\
driver\cf7 \strokec7 .\cf5 \strokec5 quit()\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
LOCATE ELEMENTS:\

\f2\b0 \cf3 1. Navigate to the element you want to identify in browser\
2. Right click on element & select \'93Inspect\'94\
3. the detailed HTML code will be in the inspection window at the \
bottom of the browser (FireFox) & on the right (Chrome)
\f0\b \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b0\fs24 \cf0 {{\NeXTGraphic LOCATE-ELEMENTS.png \width11520 \height7330 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f2\b0\fs24 \cf0 {{\NeXTGraphic LOCATE-ELEMENTS-CHROME.png \width11520 \height6380 \appleattachmentpadding0 \appleembedtype0 \appleaqc
}¬}\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs32 \cf2 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf2 \
\
\
\
WebElement
\f2\b0 \cf0 \
\cf2 ==========\cf0 \
    Accessing the text of the element with the property element.text\
    Clicking on the element with element.click()\
    Accessing an attribute with element.get_attribute('class')\
    Sending text to an input with: element.send_keys('mypassword')\
\
Honeypots are mechanisms used by website owners to detect bots. \
For example, if an HTML input has the attribute type=hidden like this:\
<input type="hidden" id="custId" name="custId" value="">\
In our example, authenticating to Hacker News is not really useful on its own. \
However, you could imagine creating a bot to automatically post a link to your latest blog post.\
\
In order to authenticate we need to:\
    Go to the login page using driver.get()\
    Select the username input using driver.find_element_by_* and then element.send_keys() to send text to the input\
    Follow the same process with the password input\
    Click on the login button using element.click()\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf4 CODE:
\f2\b0 \cf0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \

\f0\b driver.get("https://news.ycombinator.com/login")\
login = driver.find_element_by_xpath("//input").send_keys(USERNAME)\
password = driver.find_element_by_xpath("//input[@type='password']").send_keys(PASSWORD)\
submit = driver.find_element_by_xpath("//input[@value='login']").click()\
\pard\pardeftab720\partightenfactor0

\f2\b0\fs28 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 How do we know if we are logged in?
\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b \cf0 try:\
    logout_button = driver.find_element_by_id("logout")\
    print('Successfully logged in')\
except NoSuchElementException:\
    print('Incorrect login/password')\
\
try:\
    element = WebDriverWait(driver, 5).until(\
        EC.presence_of_element_located((By.ID, "mySuperId"))\
    )\
finally:\
    driver.quit()\

\f2\b0 \
Waiting for an element to be present\
============================\

\f0\b try:\
    element = WebDriverWait(driver, 5).until(\
        EC.presence_of_element_located((By.ID, "mySuperId"))\
    )\
finally:\
    driver.quit()\

\f2\b0 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Executing Javascript
\f2\b0\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf5 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 javaScript \cf7 \strokec7 =\cf5 \strokec5  \cf8 \strokec8 "window.scrollBy(0,1000);"\cf5 \strokec5 \
driver\cf7 \strokec7 .\cf5 \strokec5 execute_script(javaScript)\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Using a proxy with Selenium Wire\
\pard\pardeftab720\partightenfactor0

\f3\b0\fs24 \cf5 \cb6 \strokec5 pip install selenium\cf7 \strokec7 -\cf5 \strokec5 wire\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\sa240\partightenfactor0

\f4\fs36 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 This code snippet shows you how to quickly use your headless browser behind a proxy:
\f2\fs32 \cf0 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf10 \cb6 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec10 # Install the Python selenium-wire library:\cf5 \strokec5 \
\cf10 \strokec10 # pip install selenium-wire\cf5 \strokec5 \
\pard\pardeftab720\partightenfactor0
\cf7 \strokec7 from\cf5 \strokec5  seleniumwire \cf7 \strokec7 import\cf5 \strokec5  webdriver\
\
proxy_username \cf7 \strokec7 =\cf5 \strokec5  \cf8 \strokec8 "USER_NAME"\cf5 \strokec5 \
proxy_password \cf7 \strokec7 =\cf5 \strokec5  \cf8 \strokec8 "PASSWORD"\cf5 \strokec5 \
proxy_url \cf7 \strokec7 =\cf5 \strokec5  \cf8 \strokec8 "http://proxy.scrapingbee.com"\cf5 \strokec5 \
proxy_port \cf7 \strokec7 =\cf5 \strokec5  \cf11 \strokec11 8886\cf5 \strokec5 \
\
options \cf7 \strokec7 =\cf5 \strokec5  \{\
    \cf8 \strokec8 "proxy"\cf5 \strokec5 : \{\
        \cf8 \strokec8 "http"\cf5 \strokec5 : f\cf8 \strokec8 "http://\{proxy_username\}:\{proxy_password\}@\{proxy_url\}:\{proxy_port\}"\cf5 \strokec5 ,\
        \cf8 \strokec8 "verify_ssl"\cf5 \strokec5 : False,\
    \},\
\}\
\
URL \cf7 \strokec7 =\cf5 \strokec5  \cf8 \strokec8 "https://httpbin.org/headers?json"\cf5 \strokec5 \
\
driver \cf7 \strokec7 =\cf5 \strokec5  webdriver\cf7 \strokec7 .\cf5 \strokec5 Chrome(\
    executable_path\cf7 \strokec7 =\cf8 \strokec8 "YOUR-CHROME-EXECUTABLE-PATH"\cf5 \strokec5 ,\
    seleniumwire_options\cf7 \strokec7 =\cf5 \strokec5 options,\
)\
driver\cf7 \strokec7 .\cf5 \strokec5 get(URL)\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0

\f1\b\fs36 \cf3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec3 Blocking images and JavaScript\
\pard\pardeftab720\partightenfactor0

\f4\b0 \cf3 With Selenium, by using the correct Chrome options, you can block some requests from being made.\
\pard\pardeftab720\partightenfactor0

\f3\fs24 \cf7 \cb6 \strokec7 from\cf5 \strokec5  selenium \cf7 \strokec7 import\cf5 \strokec5  webdriver\
\
chrome_options \cf7 \strokec7 =\cf5 \strokec5  webdriver\cf7 \strokec7 .\cf5 \strokec5 ChromeOptions()\
\
\pard\pardeftab720\partightenfactor0
\cf10 \strokec10 ### This blocks images and javascript requests\cf5 \strokec5 \
chrome_prefs \cf7 \strokec7 =\cf5 \strokec5  \{\
    \cf8 \strokec8 "profile.default_content_setting_values"\cf5 \strokec5 : \{\
        \cf8 \strokec8 "images"\cf5 \strokec5 : \cf11 \strokec11 2\cf5 \strokec5 ,\
        \cf8 \strokec8 "javascript"\cf5 \strokec5 : \cf11 \strokec11 2\cf5 \strokec5 ,\
    \}\
\}\
chrome_options\cf7 \strokec7 .\cf5 \strokec5 experimental_options[\cf8 \strokec8 "prefs"\cf5 \strokec5 ] \cf7 \strokec7 =\cf5 \strokec5  chrome_prefs\
\cf10 \strokec10 ###\cf5 \strokec5 \
\
driver \cf7 \strokec7 =\cf5 \strokec5  webdriver\cf7 \strokec7 .\cf5 \strokec5 Chrome(\
    executable_path\cf7 \strokec7 =\cf8 \strokec8 "YOUR-CHROME-EXECUTABLE-PATH"\cf5 \strokec5 ,\
    chrome_options\cf7 \strokec7 =\cf5 \strokec5 chrome_options,\
)\
driver\cf7 \strokec7 .\cf5 \strokec5 get(URL)\
\pard\pardeftab720\partightenfactor0

\f2\fs32 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
}